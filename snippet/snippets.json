[{"copy":0,"tags":["layui "],"key":"51cd2a724a3da3fb9bedb28117891efb91898431","createAt":1606353984249,"updateAt":1606354069154,"name":"layui ","description":"layui 库一些常用代码片段","files":[{"key":"3b1bb1d3a76e3d390cb9dee6ebf939b963e12e3c","name":"upload-file.js","value":"//文件上传\n         upload.render({\n            elem: '#report-file-upload' //绑定元素\n            ,url: '$!{domainStg}/file/upload' //上传接口\n            ,data: {\n                \"rootPath\":\"cms/industryReport\"\n            }\n             ,accept: 'file' //普通文件\n             ,acceptMime:'application/pdf'\n             ,before: function(obj){\n                 layer.load(); //上传loading\n                 //预读本地文件示例，不支持ie8\n                 obj.preview(function(index, file, result){\n                     jQuery('input[name=reportFileName]').val(file.name);\n                     jQuery('#report-file-name').text(file.name);\n                 });\n             }\n            ,done: function(res){\n                //上传完毕回调\n                console.log(res);\n                jQuery('#report-file-upload > span').text('重新上传');\n                 jQuery('input[name=reportFileUrl]').val(res.source);\n                layer.closeAll('loading'); //关闭loading\n\n            }\n            ,error: function(){\n                //请求异常回调\n                 jQuery('#report-file-upload > span').text('选择文件');\n                 jQuery('input[name=reportFileName]').val('');\n                 jQuery('input[name=reportFileUrl]').val('');\n                 jQuery('#report-file-name').text('');\n                 layer.closeAll('loading'); //关闭loading\n            }\n        });"},{"key":"1e8fa423b31b876f19a25cdfc419b308194f36ba","name":"table.js","value":"  /**\n     * 生成col列\n     */\n    var genColsObj={\n        baseCols:[],\n        init:function(){\n            this.baseCols = [\n                {title: '序号', minWidth: 62, width: '20%', type: 'numbers'}\n                ,{field: 'dateStr', title: '日期', minWidth: 108, width: '30%'}\n            ];\n            return this;\n        },\n        getBaseCols:function (){\n            return this.baseCols;\n        },\n        genCol: function(colName,field){\n            this.baseCols.push({field: field, title: colName, minWidth: 150})\n            return this;\n        }\n    }\n\n\n    function renderTable(tableInstance,elemId,url,cols, parseDataFunc) {\n        tableInstance.render({\n            elem: elemId\n            , url: url\n            , cols: [cols]\n            , page: false\n            , limit: Number.MAX_VALUE\n            ,parseData: function(res){\n                if(parseDataFunc && parseDataFunc instanceof Function){\n                    parseDataFunc(res);\n                }\n                return {\n                    \"code\": res.code, //解析接口状态\n                    \"msg\": res.message, //解析提示文本\n                    \"count\": res.total, //解析数据长度\n                    \"data\": res.obj //解析数据列表\n                };\n            }\n            ,response: {\n                statusName: 'code' //规定数据状态的字段名称，默认：code\n                ,statusCode: 1 //规定成功的状态码，默认：0\n                ,msgName: 'msg' //规定状态信息的字段名称，默认：msg\n                ,countName: 'count' //规定数据总数的字段名称，默认：count\n                ,dataName: 'data' //规定数据列表的字段名称，默认：data\n            }\n        });\n    }"}]},{"copy":0,"tags":["jQuery"],"key":"c704e61c46c1e52d5ba9ad264cf4155266628e36","createAt":1606358561284,"updateAt":1606358561284,"name":"jQuery 常用片段","description":"jQuery 重复注册事件问题","files":[{"key":"7d6d081aad5c52dcf9f98ce7ef61e24b32ff8b60","name":"repeatClick.js","value":"//注册标签收起、展示\n        jQuery(\"#leftpanel h3.menu_head\").click(function (e) {\n            if(!e.isPropagationStopped()){  //避免重复注册，冒泡\n                setLeftMenu(jQuery(this));//设置左侧栏目收缩\n            }\n            e.stopPropagation();\n        });"}]},{"copy":1,"tags":["bat"],"key":"7ca686f02ec4c7f66b486e2c8eab21e8309c0305","createAt":1606370541815,"updateAt":1606398332516,"name":"bat 脚本","description":"window 下 bat脚本","files":[{"key":"f33f5555d6dca1137fd7141297564773fa3af689","name":"checkPort.bat","value":"netstat -ano | findstr \"%port%\""},{"key":"dead68143528007b7fed99080d9294bbd5599d15","name":"killByPid.bat","value":"taskkill /F /PID \"%pid%\""}]},{"copy":2,"tags":["shell"],"key":"3172fef3f9ae191a6612c8885e9132bab780f239","createAt":1606371736060,"updateAt":1606487338052,"name":"shell 脚本","description":"一些shell 脚本记录","files":[{"key":"af1b199cfadf58a18cb0e76ee3e19177faaf01df","name":"dos2unix.sh","value":"find . -name \"*.sh\" | xargs sed -i 's/\\r$//g'"},{"key":"58498d419b6400fbe4a0a1edeb195a0fcda811c2","name":"alias.sh","value":"#定义别名\nalias ll='ls -l'"},{"key":"a4b628e319da54419650d824177500bf41500415","name":"uncompress.sh","value":"## 解压xz压缩包\ntar -xJf Python-3.9.0.tar.xz \n\n## gz包\ntar -zxf demo.tar.gz"},{"key":"3bf5a8d5be3895e4d539aa1db19363eb2184c54e","name":"proxy.sh","value":"# 当前shell 窗口设置代理\nexport http_proxy=http://127.0.0.1:8889\nexport https_proxy=http://127.0.0.1:8889"}]},{"copy":0,"tags":["Linux","ssh"],"key":"ab6bfaf2fc4a31b7433036eb56077f6cf445ae28","createAt":1606372478092,"updateAt":1606372478092,"name":"Linux 相关配置","description":"","files":[{"key":"89865db94c4be61fa8e23ddd8b36dc2c4916ddb8","name":"ssh 登录别名配置","value":"#修改配置文件，　没有则新增\nvim ~/.ssh/config\n    \n#输入内容\nHost baidu　　\n  HostName 106.13.17.252\n  Port 22\n  User root\n  IdentityFile ~/.ssh/id_rsa.pub\n  IdentitiesOnly yes\n  \n#HostName 指定登录的主机名或IP地址\n#Port 指定登录的端口号\n#User 登录用户名\n#IdentityFile 登录的公钥文件\n#IdentitiesOnly 只接受SSH key 登录"}]},{"copy":1,"tags":["python"],"key":"a056c7670cad0b4e49c9295c196cbd32b3d57f7f","createAt":1606402528065,"updateAt":1606462057180,"name":"python 脚本","description":"一些Python 脚本","files":[{"key":"40ce6d148534dd0f75ea32a0bc972a978c69fae5","name":"uncompress.py","value":"#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport zipfile\n\nprint \"Processing File \" + sys.argv[1]\n\nfile=zipfile.ZipFile(sys.argv[1],\"r\");\nfor name in file.namelist():\n    utf8name=name.decode('gbk')\n    print \"Extracting \" + utf8name\n    pathname = os.path.dirname(utf8name)\n    if not os.path.exists(pathname) and pathname!= \"\":\n        os.makedirs(pathname)\n    data = file.read(name)\n    if not os.path.exists(utf8name):\n        fo = open(utf8name, \"w\")\n        fo.write(data)\n        fo.close\nfile.close()"}]},{"copy":0,"tags":[],"key":"44485c00a4d30a774830361eccbfeb8416f826f1","createAt":1608110605266,"updateAt":1608110605266,"name":"axois ","description":"Axois 请求拦截","files":[{"key":"b77d4f7b3cfa111c38d0112bdfa8890b856f59e8","name":"axois reponse.js","value":"// 全局設定 AJAX Response 攔截器 (interceptor)\naxios.interceptors.response.use(function (response) {\n  return response\n}, function (error) {\n  if (error.response) {\n\n    // server responded status code falls out of the range of 2xx\n    switch (error.response.status) {\n      case 400:\n        {\n          const { message } = error.response.data\n          alert(`${error.response.status}: ${message || '資料錯誤'}。`)\n        }\n\n        break\n\n      case 401:\n\n        {\n          // 當不是 refresh token 作業發生 401 才需要更新 access token 並重發\n          // 如果是就略過此刷新 access token 作業，直接不處理(因為 catch 已經攔截處理更新失敗的情況了)\n          const refreshTokeUrl = `${constant.apiUrl}users/refresh-token/`\n          if (error.config.url !== refreshTokeUrl) {\n            // 原始 request 資訊\n            const originalRequest = error.config\n\n            // 依據 refresh_token 刷新 access_token 並重發 request\n            return axios\n              .post(refreshTokeUrl) // refresh_toke is attached in cookie\n              .then((response) => {\n                // [更新 access_token 成功]\n\n                // 刷新 storage (其他呼叫 api 的地方都會從此處取得新 access_token)\n                storage.token.value = response.data.jwtToken\n\n                // 刷新原始 request 的 access_token\n                originalRequest.headers.Authorization = 'Bearer ' + response.data.jwtToken\n\n                // 重送 request (with new access_token)\n                return axios(originalRequest)\n              })\n              .catch((err) => {\n                // [更新 access_token 失敗] ( e.g. refresh_token 過期無效)\n                storage.token.value = ''\n                alert(`${err.response.status}: 作業逾時或無相關使用授權，請重新登入`)\n                window.location.href = '/login'\n                return Promise.reject(error)\n              })\n          }\n        }\n\n        break\n\n      case 404:\n        alert(`${error.response.status}: 資料來源不存在`)\n        break\n\n      case 500:\n        alert(`${error.response.status}: 內部系統發生錯誤`)\n        break\n\n      default:\n        alert(`${error.response.status}: 系統維護中，造成您的不便，敬請見諒。`)\n\n        break\n    }\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    if (error.code === 'ECONNABORTED' && error.message && error.message.indexOf('timeout') !== -1) {\n      // request time out will be here\n      alert('網路連線逾時，請點「確認」鍵後繼續使用。')\n    } else {\n      // shutdonw api server\n      alert('網路連線不穩定，請稍候再試')\n    }\n  }\n\n  return Promise.reject(error)\n})"}]},{"copy":0,"tags":["layui "],"key":"51cd2a724a3da3fb9bedb28117891efb91898431","createAt":1606353984249,"updateAt":1606354069154,"name":"layui ","description":"layui 库一些常用代码片段","files":[{"key":"3b1bb1d3a76e3d390cb9dee6ebf939b963e12e3c","name":"upload-file.js","value":"//文件上传\n         upload.render({\n            elem: '#report-file-upload' //绑定元素\n            ,url: '$!{domainStg}/file/upload' //上传接口\n            ,data: {\n                \"rootPath\":\"cms/industryReport\"\n            }\n             ,accept: 'file' //普通文件\n             ,acceptMime:'application/pdf'\n             ,before: function(obj){\n                 layer.load(); //上传loading\n                 //预读本地文件示例，不支持ie8\n                 obj.preview(function(index, file, result){\n                     jQuery('input[name=reportFileName]').val(file.name);\n                     jQuery('#report-file-name').text(file.name);\n                 });\n             }\n            ,done: function(res){\n                //上传完毕回调\n                console.log(res);\n                jQuery('#report-file-upload > span').text('重新上传');\n                 jQuery('input[name=reportFileUrl]').val(res.source);\n                layer.closeAll('loading'); //关闭loading\n\n            }\n            ,error: function(){\n                //请求异常回调\n                 jQuery('#report-file-upload > span').text('选择文件');\n                 jQuery('input[name=reportFileName]').val('');\n                 jQuery('input[name=reportFileUrl]').val('');\n                 jQuery('#report-file-name').text('');\n                 layer.closeAll('loading'); //关闭loading\n            }\n        });"},{"key":"1e8fa423b31b876f19a25cdfc419b308194f36ba","name":"table.js","value":"  /**\n     * 生成col列\n     */\n    var genColsObj={\n        baseCols:[],\n        init:function(){\n            this.baseCols = [\n                {title: '序号', minWidth: 62, width: '20%', type: 'numbers'}\n                ,{field: 'dateStr', title: '日期', minWidth: 108, width: '30%'}\n            ];\n            return this;\n        },\n        getBaseCols:function (){\n            return this.baseCols;\n        },\n        genCol: function(colName,field){\n            this.baseCols.push({field: field, title: colName, minWidth: 150})\n            return this;\n        }\n    }\n\n\n    function renderTable(tableInstance,elemId,url,cols, parseDataFunc) {\n        tableInstance.render({\n            elem: elemId\n            , url: url\n            , cols: [cols]\n            , page: false\n            , limit: Number.MAX_VALUE\n            ,parseData: function(res){\n                if(parseDataFunc && parseDataFunc instanceof Function){\n                    parseDataFunc(res);\n                }\n                return {\n                    \"code\": res.code, //解析接口状态\n                    \"msg\": res.message, //解析提示文本\n                    \"count\": res.total, //解析数据长度\n                    \"data\": res.obj //解析数据列表\n                };\n            }\n            ,response: {\n                statusName: 'code' //规定数据状态的字段名称，默认：code\n                ,statusCode: 1 //规定成功的状态码，默认：0\n                ,msgName: 'msg' //规定状态信息的字段名称，默认：msg\n                ,countName: 'count' //规定数据总数的字段名称，默认：count\n                ,dataName: 'data' //规定数据列表的字段名称，默认：data\n            }\n        });\n    }"}]},{"copy":0,"tags":["jQuery"],"key":"c704e61c46c1e52d5ba9ad264cf4155266628e36","createAt":1606358561284,"updateAt":1606358561284,"name":"jQuery 常用片段","description":"jQuery 重复注册事件问题","files":[{"key":"7d6d081aad5c52dcf9f98ce7ef61e24b32ff8b60","name":"repeatClick.js","value":"//注册标签收起、展示\n        jQuery(\"#leftpanel h3.menu_head\").click(function (e) {\n            if(!e.isPropagationStopped()){  //避免重复注册，冒泡\n                setLeftMenu(jQuery(this));//设置左侧栏目收缩\n            }\n            e.stopPropagation();\n        });"}]},{"copy":1,"tags":["bat"],"key":"7ca686f02ec4c7f66b486e2c8eab21e8309c0305","createAt":1606370541815,"updateAt":1606398332516,"name":"bat 脚本","description":"window 下 bat脚本","files":[{"key":"f33f5555d6dca1137fd7141297564773fa3af689","name":"checkPort.bat","value":"netstat -ano | findstr \"%port%\""},{"key":"dead68143528007b7fed99080d9294bbd5599d15","name":"killByPid.bat","value":"taskkill /F /PID \"%pid%\""}]},{"copy":2,"tags":["shell"],"key":"3172fef3f9ae191a6612c8885e9132bab780f239","createAt":1606371736060,"updateAt":1606487338052,"name":"shell 脚本","description":"一些shell 脚本记录","files":[{"key":"af1b199cfadf58a18cb0e76ee3e19177faaf01df","name":"dos2unix.sh","value":"find . -name \"*.sh\" | xargs sed -i 's/\\r$//g'"},{"key":"58498d419b6400fbe4a0a1edeb195a0fcda811c2","name":"alias.sh","value":"#定义别名\nalias ll='ls -l'"},{"key":"a4b628e319da54419650d824177500bf41500415","name":"uncompress.sh","value":"## 解压xz压缩包\ntar -xJf Python-3.9.0.tar.xz \n\n## gz包\ntar -zxf demo.tar.gz"},{"key":"3bf5a8d5be3895e4d539aa1db19363eb2184c54e","name":"proxy.sh","value":"# 当前shell 窗口设置代理\nexport http_proxy=http://127.0.0.1:8889\nexport https_proxy=http://127.0.0.1:8889"}]},{"copy":0,"tags":["Linux","ssh"],"key":"ab6bfaf2fc4a31b7433036eb56077f6cf445ae28","createAt":1606372478092,"updateAt":1606372478092,"name":"Linux 相关配置","description":"","files":[{"key":"89865db94c4be61fa8e23ddd8b36dc2c4916ddb8","name":"ssh 登录别名配置","value":"#修改配置文件，　没有则新增\nvim ~/.ssh/config\n    \n#输入内容\nHost baidu　　\n  HostName 106.13.17.252\n  Port 22\n  User root\n  IdentityFile ~/.ssh/id_rsa.pub\n  IdentitiesOnly yes\n  \n#HostName 指定登录的主机名或IP地址\n#Port 指定登录的端口号\n#User 登录用户名\n#IdentityFile 登录的公钥文件\n#IdentitiesOnly 只接受SSH key 登录"}]},{"copy":1,"tags":["python"],"key":"a056c7670cad0b4e49c9295c196cbd32b3d57f7f","createAt":1606402528065,"updateAt":1606462057180,"name":"python 脚本","description":"一些Python 脚本","files":[{"key":"40ce6d148534dd0f75ea32a0bc972a978c69fae5","name":"uncompress.py","value":"#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport zipfile\n\nprint \"Processing File \" + sys.argv[1]\n\nfile=zipfile.ZipFile(sys.argv[1],\"r\");\nfor name in file.namelist():\n    utf8name=name.decode('gbk')\n    print \"Extracting \" + utf8name\n    pathname = os.path.dirname(utf8name)\n    if not os.path.exists(pathname) and pathname!= \"\":\n        os.makedirs(pathname)\n    data = file.read(name)\n    if not os.path.exists(utf8name):\n        fo = open(utf8name, \"w\")\n        fo.write(data)\n        fo.close\nfile.close()"}]},{"key":"44485c00a4d30a774830361eccbfeb8416f826f1","createAt":1608110605266,"updateAt":1608110605266,"copy":0,"tags":[],"name":"axois ","description":"Axois 请求拦截","files":[{"key":"b77d4f7b3cfa111c38d0112bdfa8890b856f59e8","name":"axois reponse.js","value":"// 全局設定 AJAX Response 攔截器 (interceptor)\naxios.interceptors.response.use(function (response) {\n  return response\n}, function (error) {\n  if (error.response) {\n\n    // server responded status code falls out of the range of 2xx\n    switch (error.response.status) {\n      case 400:\n        {\n          const { message } = error.response.data\n          alert(`${error.response.status}: ${message || '資料錯誤'}。`)\n        }\n\n        break\n\n      case 401:\n\n        {\n          // 當不是 refresh token 作業發生 401 才需要更新 access token 並重發\n          // 如果是就略過此刷新 access token 作業，直接不處理(因為 catch 已經攔截處理更新失敗的情況了)\n          const refreshTokeUrl = `${constant.apiUrl}users/refresh-token/`\n          if (error.config.url !== refreshTokeUrl) {\n            // 原始 request 資訊\n            const originalRequest = error.config\n\n            // 依據 refresh_token 刷新 access_token 並重發 request\n            return axios\n              .post(refreshTokeUrl) // refresh_toke is attached in cookie\n              .then((response) => {\n                // [更新 access_token 成功]\n\n                // 刷新 storage (其他呼叫 api 的地方都會從此處取得新 access_token)\n                storage.token.value = response.data.jwtToken\n\n                // 刷新原始 request 的 access_token\n                originalRequest.headers.Authorization = 'Bearer ' + response.data.jwtToken\n\n                // 重送 request (with new access_token)\n                return axios(originalRequest)\n              })\n              .catch((err) => {\n                // [更新 access_token 失敗] ( e.g. refresh_token 過期無效)\n                storage.token.value = ''\n                alert(`${err.response.status}: 作業逾時或無相關使用授權，請重新登入`)\n                window.location.href = '/login'\n                return Promise.reject(error)\n              })\n          }\n        }\n\n        break\n\n      case 404:\n        alert(`${error.response.status}: 資料來源不存在`)\n        break\n\n      case 500:\n        alert(`${error.response.status}: 內部系統發生錯誤`)\n        break\n\n      default:\n        alert(`${error.response.status}: 系統維護中，造成您的不便，敬請見諒。`)\n\n        break\n    }\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    if (error.code === 'ECONNABORTED' && error.message && error.message.indexOf('timeout') !== -1) {\n      // request time out will be here\n      alert('網路連線逾時，請點「確認」鍵後繼續使用。')\n    } else {\n      // shutdonw api server\n      alert('網路連線不穩定，請稍候再試')\n    }\n  }\n\n  return Promise.reject(error)\n})"}]}]